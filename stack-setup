#!/bin/sh
#
# Name: stack-setup
#
#
# Description:
#
# Script for configuring a Debian server for hosting the Stack web app
# To copy this script to the intended Stack server
# (if not already copied there), run:   stack-setup -b hostname
#
# Then login to the Stack server and run the script (as root)
# with the appropriate options (use -h for help)
#
# See: https://www.wiki.ed.ac.uk/display/MathsITInfo/Stack+install+Debian
#
#*********************************************************************
# Sections where the script needs manual input are marked with asterisks
#*********************************************************************
#
#
######################################################################
# PLEASE DO NOT EDIT THIS FILE ON THE SERVER
# For long-term safe-keeping, the original file is in:
#  ~dmarsh/proj/serv/script/stack/stack-setup/
# and is copied over to the server whenever it is updated.
# Update the changelog whenever you make changes.
######################################################################


######################################################################
# Changelog (newest first)
######################################################################
#
VERSION="028"
# 028. 2016-07-12 csangwin      Updated version numbers for 2016-17 teaching cycle.
# 027. 2016-07-12 dmarsh        Added config for https
# 026. 2016-05-23 dmarsh        Updated file path saved in moodle-data backup tarball
# 025. 2016-05-19 dmarsh        Minor presentational change to initial variable sanity check output
# 024. 2016-05-19 dmarsh        Adjusted the times that the cronjobs run at
# 023. 2016-05-18 dmarsh        Corrected missing DB value in data backup script!
# 022. 2016-05-13 dmarsh        Minor change to pause points
# 021. 2016-05-12 dmarsh        Added Moodle/Stack version tags, and gcc package
# 020. 2016-05-06 dmarsh        Added 'maintenance mode' during overnight data backups
# 019. 2016-05-06 dmarsh        Modified to have a unique DB user for the Moodle DB for each Stack instance
# 018. 2016-05-06 dmarsh        Checked variable names and added notes to help the Stack administrator
# 017. 2016-04-28 dmarsh        Make local backup tarball of moodle-data (for remote backup)
# 016. 2016-04-28 dmarsh        Changed moodle-data folder name (for clarity)
# 015. 2016-04-28 dmarsh        Added version string
# 014. 2016-04-28 dmarsh        Added remove option (delete installed files)
# 013. 2016-04-14 dmarsh        Added note about git network port needed
# 012. 2016-04-12 dmarsh        Added manual input of Stack service name (also used as the DB name)
# 011. 2016-04-12 dmarsh        Added note of wiki page
# 010. 2016-03-02 dmarsh        Added ntp package to sync system time
# 009. 2016-02-08 dmarsh        Corrected syntax of DB backup script
# 008. 2016-02-08 dmarsh        Updated DB password notes
# 007. 2016-02-05 dmarsh        Made sure cronjob scripts are +x
# 006. 2016-02-04 dmarsh        Also installed LTI provider plugin
# 005. 2016-02-04 dmarsh        Corrected permissions of crontabs folder
# 004. 2016-02-03 dmarsh        Corrected group of MOODLE_DATA_DIR
# 003. 2016-02-03 dmarsh        Added bootstrap code to install the script onto the remote server
# 002. 2016-02-01 dmarsh        Added needed php5-mysqlnd pkg, mailserver setup, cron, DB backup
# 001. 2016-01-26 dmarsh        Initial version



######################################################################
# Bootstrap (-b hostname) this script onto the remote server
######################################################################
bootstrap()
{
    INSTALL_DIR=/local/bin
    SCRIPT=`basename $0`

    echo "Copying script '${SCRIPT}' onto server: '${RHOST}' into '${INSTALL_DIR}'"
    echo "(You need to login (as root) 2 times.)"
    ssh root@$RHOST "umask 027; mkdir -p $INSTALL_DIR"
    scp -p "$SCRIPT" root@$RHOST:/$INSTALL_DIR
    echo "Done. Login to the server and run the script as root."
    exit
}


# Show version
echo ">> stack-setup: version ${VERSION}"


# Parse command line options
while [ $# -gt 0 ]; do
    case $1 in
        -b )    RHOST=$2; bootstrap;;
        -i )    ACTION=install;;
        -r )    ACTION=remove;;
        -s )    STACK_SERVICE=$2;;
        -h )    echo "Options: "
                echo "$0 [-b rhost] | [(-i|-r) -s servicename] | [-h]"
                echo " -b rhost = bootstrap the script to the remote host rhost"
                echo " -i = install"
                echo " -r = remove"
                echo " -s servicename = set the one-word name for this Stack service (required)"
                echo " -h = help"
                echo "Must be run as root in install or remove mode."
                exit 0;;
        * )     break;;
    esac
    shift
done


############################################################
# Script needs root privileges to run in install mode
############################################################
if [ `id -u` -ne 0 ]; then
    echo "$0: must be run with root privileges, exiting.. " 1>&2
    exit 1
fi


############################################################
# Config
############################################################
# Sleep delay interval, when needed
DELAY=10

# Timestamp
TIMESTAMP=`/bin/date +%F_%s`

MARK_START=" ::Maths::"
MARK_END=" ::Maths_END::"


# Server hostname and domain name
STACK_HOST=`/bin/hostname -s`
STACK_DOMAIN=`/bin/hostname -d`

# STACK_SERVICE is also used for the DB name, and for the web/data folder names
if [ "$STACK_SERVICE" = "" ]; then
    echo "Stack service name not defined (-s servicename is required), exiting. Use -h for help." 1>&2
    exit 1
else
    echo ">> The name of this Stack service is: $STACK_SERVICE"
fi

#STACK_FULLNAME (entered later)
#STACK_SHORTNAME (entered later)
#STACK_SUMMARY (entered later)
STACK_WEB_ROOT=/var/www/html/$STACK_SERVICE


# Debian uses 'www-data' as the apache user, see: /etc/apache2/envvars
APACHE_USER=www-data
APACHE_GROUP=www-data

# This is a standard system path on Debian (Red Hat uses /var/spool/cron/ instead)
APACHE_CRONTAB=/var/spool/cron/crontabs/$APACHE_USER
ROOT_CRONTAB=/var/spool/cron/crontabs/root

# Folder for users' cronjob files
CRONJOBS_DIR=/local/cronjobs


# Debian PHP config file
PHP_CFG=/etc/php5/apache2/php.ini

# Debian SSL keys dir
SSL_DIR_KEYS=/etc/ssl/private
# Debian SSL certs dir
SSL_DIR_CERTS=/etc/ssl/certs

# Debian SSL website config file
APACHE_DIR_SITECONFS=/etc/apache2/sites-available/
APACHE_CONF_SSL_DEFAULT=default-ssl.conf
APACHE_CONF_SSL_NAME="${STACK_HOST}-ssl"


# The userid can be ignored for now
# We use the UUN homedir for off-server backups, however (not in this script)
#STACK_USER=mthdat54
#STACK_UID=1548678
#STACK_HOME=/home/$STACKUSER


# Moodle version to install
#MOODLE_VERSION=MOODLE_31_STABLE
# Now using a specific version (not the (changing) latest build of the release)
MOODLE_VERSION=v3.1.1

# Unique DB user for each Moodle instance
MOODLE_DB_USER=moodle_${STACK_SERVICE}
# Moodle DB name is the same as STACK_SERVICE
#MOODLE_DB_PASSWD (entered later)

MOODLE_ADMIN_USER=admin
#MOODLE_ADMIN_PASSWD (entered later)
MOODLE_ADMIN_EMAIL="moodle@maths.ed.ac.uk"

MOODLE_DATA_DIR=/var/data/${MOODLE_DB_USER}/${STACK_SERVICE}

# LTI Provider URI/version
MOODLE_PLUGIN_LTI="https://moodle.org/plugins/download.php/10423/local_ltiprovider_moodle30_2016020100.zip"

# Stack package version
STACK_VERSION=v3.5.5


#DB_ROOT_PASSWD (entered later)
SQL_CNF=/root/.my.cnf

BKP_DIR_DB=/var/data/backups/db/"${STACK_HOST}"
BKP_DIR_MDATA=/var/data/backups/mdata/${STACK_HOST}
BKP_SDATA_SCRIPT="$CRONJOBS_DIR"/root/backup-stackdata_"$STACK_SERVICE"


echo ">> Initial variables are now set."
echo ">> Stack service name:   ${STACK_SERVICE}"
echo ">> Stack web root:       ${STACK_WEB_ROOT}"
echo ">> Moodle data folder:   ${MOODLE_DATA_DIR}"
echo ">> DB user:              ${MOODLE_DB_USER}"
echo ">> DB name (same as Stack service): ${STACK_SERVICE}"

echo ">> DB backup folder:     ${BKP_DIR_DB}"
echo ">> Moodle-data backup folder: ${BKP_DIR_MDATA}"

echo ">> Moodle version:       ${MOODLE_VERSION}"
echo ">> LTI Provider version: ${MOODLE_PLUGIN_LTI}"
echo ">> Stack version:        ${STACK_VERSION}"
echo



######################################################################
# install function
######################################################################
install()
{
    echo ">> Installing Stack service '${STACK_SERVICE}'.."
    echo ">> NB: network port 9418 needs to be open for git traffic, to download packages"
    echo ">> Requests for input are prefixed with: ****"
    echo ">> Pausing.."; /bin/sleep $DELAY

    #-----------------------------------------------------------
    # Install needed packages
    #-----------------------------------------------------------
    /usr/bin/apt-get install php5 php5-mysqlnd php5-curl php5-intl php5-xmlrpc \
        php5-gd maxima gnuplot gcc git texinfo ntp zip vim

    #-----------------------------------------------------------
    # PHP config changes
    #-----------------------------------------------------------
    # Set PHP timezone
    /bin/cp -a "$PHP_CFG" "$PHP_CFG"."$TIMESTAMP"
    /bin/cat <<EOT >> "$PHP_CFG"
;$MARK_START Set PHP timezone
[Date]
; Defines the default timezone used by the date functions
date.timezone = "Europe/London"
;$MARK_END
EOT


    #-----------------------------------------------------------
    # Restart Apache (just in case) to ensure that the PHP DB module is loaded
    #-----------------------------------------------------------
    /usr/sbin/apache2ctl graceful


    #-----------------------------------------------------------
    # Install DB system and set up DB
    #-----------------------------------------------------------
    if [ -f "/usr/sbin/mysqld" ]
    then
        echo ">> MariaDB SQL server is already installed."
    else
        echo ">> MariaDB SQL server is not installed, installing.."
        #***********************************************************
        # The MariaDB installation prompts you to set the DB root password
        #***********************************************************
        echo "Installing MariaDB: The DB root password is saved to the .my.cnf file"
        echo "for automated use, but you will need to enter it (several times) during the install."
        echo "You will later also need to set a separate password for the Moodle DB."
        echo "**** Set the DB root password: "
        read DB_ROOT_PASSWD

        echo ">> Saving DB root password to DB config file.."
        /usr/bin/touch $SQL_CNF
        /bin/chmod go-rwx $SQL_CNF

        /bin/cat <<EOT >> "$SQL_CNF"
#$MARK_START
[client]
password=$DB_ROOT_PASSWD
#$MARK_END
EOT

        /usr/bin/apt-get install mariadb-server

        # Run: /usr/bin/mysql_secure_installation
        echo ">> About to run DB secure installation.."
        echo ">> (See: https://www.wiki.ed.ac.uk/display/MathsITInfo/Database+setup)"
        echo ">> Pausing.."; /bin/sleep $DELAY
        echo "**** Press enter to continue.."; read CONTINUE
        /usr/bin/mysql_secure_installation
    fi



    # Create Moodle DB and user
    #***********************************************************
    # Set password for the Moodle DB user
    #***********************************************************
    echo "**** Set the Moodle DB user password: "
    read MOODLE_DB_PASSWD

    echo ">> Creating database and user.."
    echo "CREATE DATABASE ${STACK_SERVICE} CHARACTER SET utf8 COLLATE utf8_general_ci" | /usr/bin/mysql

    echo "GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,CREATE TEMPORARY TABLES,DROP,INDEX,ALTER ON ${STACK_SERVICE}.* TO '${MOODLE_DB_USER}'@'localhost' IDENTIFIED BY '${MOODLE_DB_PASSWD}'" | /usr/bin/mysql

    echo "FLUSH PRIVILEGES; SHOW GRANTS FOR '${MOODLE_DB_USER}'@'localhost'" | /usr/bin/mysql

    # Remove any password detritus
    /bin/rm ~/.bash_history
    /bin/rm ~/.mysql_history


    #-----------------------------------------------------------
    # Download Moodle and Stack
    #-----------------------------------------------------------
    # Create Stack web folder
    /bin/mkdir -p $STACK_WEB_ROOT
    /bin/chown $APACHE_USER $STACK_WEB_ROOT

    # Create folder for Moodle data
    /bin/mkdir -p $MOODLE_DATA_DIR
    /bin/chmod 0770 $MOODLE_DATA_DIR
    /bin/chgrp $APACHE_GROUP $MOODLE_DATA_DIR


    # Download Moodle into the web folder
    echo ">> Downloading Moodle.."
    /usr/bin/git clone -b $MOODLE_VERSION git://git.moodle.org/moodle.git $STACK_WEB_ROOT

    # Download the Stack scripts
    echo ">> Downloading Stack.."
    /usr/bin/git clone git://github.com/maths/moodle-qbehaviour_dfexplicitvaildate.git \
        $STACK_WEB_ROOT/question/behaviour/dfexplicitvaildate

    /usr/bin/git clone git://github.com/maths/moodle-qbehaviour_dfcbmexplicitvaildate.git \
        $STACK_WEB_ROOT/question/behaviour/dfcbmexplicitvaildate

    /usr/bin/git clone git://github.com/maths/moodle-qbehaviour_adaptivemultipart.git \
        $STACK_WEB_ROOT/question/behaviour/adaptivemultipart

    # Stack question-type is now a specific version
    /usr/bin/git clone -b $STACK_VERSION git://github.com/maths/moodle-qtype_stack.git \
        $STACK_WEB_ROOT/question/type/stack


    #-----------------------------------------------------------
    # Set up Moodle
    # See: https://docs.moodle.org/29/en/Administration_via_command_line
    #-----------------------------------------------------------
    #***********************************************************
    # Set Moodle admin user password
    #***********************************************************
    echo "**** Set the Moodle admin user password (notify the Moodle administrator(s)): "
    read MOODLE_ADMIN_PASSWD

    #***********************************************************
    # Set if server is http or https
    #***********************************************************
    echo "**** Enter the website protocol type (http (default (press enter)), or https): "
    echo "(If protocol changes later, edit wwwroot var, in config.php in Moodle web root)"
    read PROTO

    if [ "$PROTO" = "https" ]
    then
        PROTO=https
        PORT=443

        echo ">> Enabling SSL.."
        /usr/sbin/a2enmod ssl

        echo ">> Copying security key and certs from remote storage onto this server.."
        echo "**** Use scp manually to copy the files onto the server."

        echo "**** Enter the name of the key file: "
        read SSL_KEY
        echo "**** Now copy the file to the server into: ${SSL_DIR_KEYS} "
        echo

        echo "**** Enter the name of the certificate file: "
        read SSL_CERT
        echo "**** Now copy the file to the server into: ${SSL_DIR_CERTS} "
        echo

        echo "**** Enter the name of the certificate chain file (for JISC certs): "
        read SSL_CHAIN
        echo "**** Now copy the file to the server into: ${SSL_DIR_CERTS} "
        echo

        echo "**** Press enter AFTER you have copied the cert files to the server."; read CONTINUE


        echo ">> Creating SSL config file for website: ${STACK_HOST} "

        /bin/cp -a ${APACHE_DIR_SITECONFS}/${APACHE_CONF_SSL_DEFAULT} \
            ${APACHE_DIR_SITECONFS}/${APACHE_CONF_SSL_NAME}.conf

        echo "**** Now edit the website Apache config file"
        echo "**** ${APACHE_DIR_SITECONFS}/${APACHE_CONF_SSL_NAME}.conf"
        echo "**** and comment out the fake cert lines and insert: "

        echo "SSLCertificateFile        ${SSL_DIR_CERTS}/{$SSL_CERT}"
        echo "SSLCertificateKeyFile     ${SSL_DIR_KEYS}/{$SSL_KEY}"
        echo "SSLCertificateChainFile   ${SSL_DIR_CERTS}/{$SSL_CHAIN}"

        echo "**** Press enter AFTER you have edited the Apache config file."; read CONTINUE

        echo ">> Enabling SSL config file for website: ${STACK_HOST} "
        /usr/sbin/a2ensite ${APACHE_CONF_SSL_NAME}
        /usr/sbin/apache2ctl graceful

    else
        PROTO=http
        PORT=80
    fi

    STACK_URI=${PROTO}://${STACK_HOST}.${STACK_DOMAIN}/${STACK_SERVICE}
    echo ">> Website address is: $STACK_URI"
    echo ">> Pausing.."; /bin/sleep $DELAY


    # Prepare Moodle installation/configuration
    cd $STACK_WEB_ROOT

    echo "**** Set the Stack site full name (eg, STACK Demonstration site): "
    read STACK_FULLNAME

    echo "**** Set the Stack site short name (eg, STACK demo): "
    read STACK_SHORTNAME

    echo "**** Set the Stack site summary description: "
    read STACK_SUMMARY



    # dbtype was mysqli, try mariadb (see: https://docs.moodle.org/29/en/MariaDB)
    SU_CMD="/usr/bin/php admin/cli/install.php \
     --wwwroot=${STACK_URI} --dataroot=${MOODLE_DATA_DIR} \
     --dbtype=mariadb --dbhost=localhost \
     --dbname=${STACK_SERVICE} --dbuser=${MOODLE_DB_USER} --dbpass=${MOODLE_DB_PASSWD} \
     --prefix=mdl_ --fullname='${STACK_FULLNAME}' --shortname='${STACK_SHORTNAME}' \
     --summary='${STACK_SUMMARY}' \
     --adminuser=${MOODLE_ADMIN_USER} --adminpass=${MOODLE_ADMIN_PASSWD} \
     --adminemail=${MOODLE_ADMIN_EMAIL} \
     --non-interactive --agree-license"

    echo ">> Moodle install command (pausing so that you can check) is:"
    echo $SU_CMD
    echo ">> Pausing.."; /bin/sleep $DELAY
    echo "**** Press enter to continue.."; read CONTINUE


    echo ">> Installing Moodle (this will take a few minutes).. "
    #/bin/su $APACHE_USER -s /bin/sh  -c $SU_CMD
    echo $SU_CMD | /bin/su $APACHE_USER -s /bin/sh


    echo ">> Moodle should now be installed (pausing so that you can check for errors)."
    echo ">> About to install LTI Provider plugin.. "
    echo ">> Pausing.."; /bin/sleep $DELAY
    echo "**** Press enter to continue.."; read CONTINUE

    #-----------------------------------------------------------
    # The basic Moodle/Stack system should now be installed.
    # Now any further config tweaks
    #-----------------------------------------------------------

    # Install LTI provider plugin
    echo ">> Installing LTI Provider plugin.. "
    /usr/bin/wget ${MOODLE_PLUGIN_LTI}  -O /tmp/ltiprovider.zip
    /usr/bin/unzip /tmp/ltiprovider.zip  -d $STACK_WEB_ROOT/local/
    /bin/rm /tmp/ltiprovider.zip


    #-----------------------------------------------------------
    # Prevent writing of web files after Moodle installation
    # (This must the last thing that is done to the actual Moodle files)
    #-----------------------------------------------------------
    /bin/chown -R root $STACK_WEB_ROOT



    #-----------------------------------------------------------
    # Configure mail server
    #-----------------------------------------------------------
    echo ">> About to configure mailserver, enter settings as per:"
    echo ">> https://www.wiki.ed.ac.uk/display/MathsITInfo/Stack+install+Debian"
    echo ">> Pausing.."; /bin/sleep $DELAY
    echo "**** Press enter to continue.."; read CONTINUE
    /usr/sbin/dpkg-reconfigure exim4-config


    #-----------------------------------------------------------
    # Set up Moodle cron job
    #-----------------------------------------------------------
    echo ">> Creating Moodle cron job.."

    /bin/cat <<EOT >> $APACHE_CRONTAB
#$MARK_START
# Added by 'stack-setup', do not edit
#M    H   d   m   w
*/10  *   *   *   *     /usr/bin/php $STACK_WEB_ROOT/admin/cli/cron.php > /dev/null
#$MARK_END
EOT

    /bin/chmod go-rwx $APACHE_CRONTAB
    /bin/chown $APACHE_USER:crontab $APACHE_CRONTAB


    #-----------------------------------------------------------
    # Set up data backup cron job
    #-----------------------------------------------------------
    echo ">> Creating data backup cron job.."

    /bin/mkdir -p $BKP_DIR_DB
    /bin/chmod 0770 $BKP_DIR_DB

    /bin/mkdir -p $BKP_DIR_MDATA
    /bin/chmod 0770 $BKP_DIR_MDATA

    /bin/cat <<EOT >> $ROOT_CRONTAB
#$MARK_START
# Added by 'stack-setup', do not edit
#M  H   d   m   w
# Delete old DB backups (every Monday)
01  03  *   *   1   /usr/bin/find "$BKP_DIR_DB" -type f -name '*.sql.gz' -mtime +70 -delete
# Delete old Moodle data backups (every Monday)
02  03  *   *   1   /usr/bin/find "$BKP_DIR_MDATA" -type f -name '*.tgz' -mtime +70 -delete
# Backup the DB and Moodle data
10  03  *   *   *   "$BKP_SDATA_SCRIPT"
#$MARK_END
EOT

    /bin/chmod go-rwx "$ROOT_CRONTAB"
    /bin/chown root:crontab "$ROOT_CRONTAB"


    #-----------------------------------------------------------
    # Creating the actual cronjob script for data backup
    #-----------------------------------------------------------
    /bin/mkdir -p $CRONJOBS_DIR/root

    /bin/cat <<EOT > "$BKP_SDATA_SCRIPT"
#!/bin/sh
# This file is autogenerated by 'stack-setup', do not edit
# This is: $BKP_SDATA_SCRIPT
#
# In the file generator:
# Backslash-escape values that need to be echoed into the file unchanged/undereferenced

TODAY=\`/bin/date +%F\`


umask 0077

# Sleep for a short random interval so that multiple backups do not take place all at once
SLEEPY=\`/usr/bin/shuf -i 1-240 -n 1\`
/bin/sleep \$SLEEPY

# Enable Moodle maintenance mode
/usr/bin/php "$STACK_WEB_ROOT"/admin/cli/maintenance.php --enablelater=5


# Make a dump of the Stack DB
/usr/bin/mysqldump --databases "$STACK_SERVICE"  | \
    /bin/gzip  > "$BKP_DIR_DB"/"$STACK_HOST"-"\$TODAY"-"$STACK_SERVICE".sql.gz

# Create a tarball of the Stack Moodle data
# Go to the Stack Moodle data folder
cd "$MOODLE_DATA_DIR"
# Go up one level, to immediately above the STACK_SERVICE folder
cd ..
# Create a tarball of the STACK_SERVICE Moodle data folder
/bin/tar zcf "$BKP_DIR_MDATA"/"$STACK_HOST"-mdata-"\$TODAY"-"$STACK_SERVICE".tgz  "$STACK_SERVICE"


# Disable Moodle maintenance mode
/usr/bin/php "$STACK_WEB_ROOT"/admin/cli/maintenance.php --disable

EOT


    # Protect root's cronjob scripts (and make sure that they are also executable)
    /bin/chmod -R u+x,o-rwx $CRONJOBS_DIR/root


    # Ask sysadmin to update ntp config with UoE ntp server
    # FIXME: Should really do this automatically via search/replace..!
    echo "**** Please edit /etc/ntp.conf to add the UoE ntp time server, and restart ntp!"

} ## end install
######################################################################




######################################################################
# remove function
######################################################################
remove()
{
    echo ">> Removing Stack service '${STACK_SERVICE}'.."
    echo ">> Disabling website (error can be ignored if site was not https).."
    /usr/sbin/a2dissite ${APACHE_CONF_SSL_NAME}

    echo ">> Stopping Apache.."
    /usr/sbin/apache2ctl stop
    echo ">> Pausing.."; /bin/sleep $DELAY

    echo "Mark start: ${MARK_START}"
    echo "Mark end: ${MARK_END}"

    echo ">> Removing PHP config changes.."
    # https://stackoverflow.com/questions/11738346/how-to-remove-text-block-from-file-with-bash
    echo "/^;${MARK_START}/,/^;${MARK_END}/d"
    /bin/sed -i "/^;${MARK_START}/,/^;${MARK_END}/d" $PHP_CFG

    echo ">> Deleting database '${STACK_SERVICE}'.."
    echo "DROP DATABASE IF EXISTS $STACK_SERVICE" | /usr/bin/mysql

    echo ">> Deleting DB user '$MOODLE_DB_USER'.."
    echo "DROP USER '$MOODLE_DB_USER'@'localhost'" | /usr/bin/mysql

    echo ">> Removing .my.cnf changes.."
    /bin/sed -i "/^#${MARK_START}/,/^#${MARK_END}/d" $SQL_CNF

    # Stop DB system
    echo ">> Stopping MariaDB.."
    /usr/sbin/service mysql stop
    echo ">> Pausing.."; /bin/sleep $DELAY

    # Completely purge DB system?
    echo "**** Completely purge entire DB system? [yN]: "
    read PURGE_DB
    if [ "$PURGE_DB" = "y" ]
    then
        /usr/bin/apt-get purge mariadb-server
        # Need to also use autoremove to actually delete mysqld (huh?)
        /usr/bin/apt-get autoremove
    fi


    echo ">> Removing Stack web files.."
    /bin/rm -r $STACK_WEB_ROOT

    echo ">> Removing Moodle data folder.."
    /bin/rm -r $MOODLE_DATA_DIR


    echo ">> Removing crontabs changes.."
    /bin/sed -i "/^#${MARK_START}/,/^#${MARK_END}/d" $APACHE_CRONTAB
    /bin/sed -i "/^#${MARK_START}/,/^#${MARK_END}/d" $ROOT_CRONTAB

    echo ">> Removing DB backup script.."
    /bin/rm "$BKP_SDATA_SCRIPT"

}
## end remove
############################################################




############################################################
# main code
############################################################
if [ "$ACTION" != "" ]
then
    $ACTION
else
    echo "No action specified, exiting.. " 1>&2
    exit 1
fi

## END
