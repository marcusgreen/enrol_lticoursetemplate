#!/bin/sh
#
# Name: jobe-setup
#
# Description:
#
# Script for configuring a Debian server for hosting the Jobe compilation engine
# To copy this script to the intended server
# (if not already copied there), run:   jobe-setup -b hostname -l username
#
# Then login to the server and run the script using sudo
# with the appropriate options (use -h for help)
#
# See: https://www.wiki.ed.ac.uk/display/STACK/CodeRunner
#
#*********************************************************************
# Sections where the script needs manual input are marked with asterisks
#*********************************************************************
#
#
######################################################################
# PLEASE DO NOT EDIT THIS FILE ON THE SERVER
# For long-term safe-keeping, the original file is in:
#  https://github.com/ltsmvm/stack
# and is copied over to the server whenever it is updated.
# Update the changelog whenever you make changes.
######################################################################

######################################################################
# Changelog (newest first)
######################################################################
VERSION="001"
# 001. 2017-03-31 dmarsh        Initial version (needs refinement)
######################################################################


# Show version
echo ">> jobe-setup: version ${VERSION}"



############################################################
# Configuration function
############################################################
config() 
{
# Sleep delay interval, when needed
DELAY=10

# Timestamp
TIMESTAMP=`/bin/date +%F_%s`

MARK_START=" ::Maths::"
MARK_END=" ::Maths_END::"


# Server hostname and domain name
JOBE_HOST=`/bin/hostname -s`
JOBE_DOMAIN=`/bin/hostname -d`

# STACK_SERVICE is also used for the DB name, and for the web/data folder names
#if [ "$STACK_SERVICE" = "" ]; then
#    echo "Stack service name not defined (-s servicename is required), exiting. (Use -h for help.)" 1>&2
#    exit 1
#else
#    echo ">> The name of this Stack service is: $STACK_SERVICE"
#fi


# Apache settings
# Debian uses 'www-data' as the apache user, see: /etc/apache2/envvars
APACHE_USER=www-data
APACHE_GROUP=www-data

WEB_ROOT_DEFAULT=/var/www/html


#STACK_FULLNAME (entered later)
#STACK_SHORTNAME (entered later)
#STACK_SUMMARY (entered later)

# Jobe *MUST* be downloaded into here..
JOBE_WEB_ROOT="${WEB_ROOT_DEFAULT}"
# ..and installs itself into here..
JOBE_WEB_DIR="${JOBE_WEB_ROOT}"/jobe



# This is a standard system path on Debian (Red Hat uses /var/spool/cron/ instead)
APACHE_CRONTAB=/var/spool/cron/crontabs/$APACHE_USER
ROOT_CRONTAB=/var/spool/cron/crontabs/root

# Folder for users' cronjob files
CRONJOBS_DIR=/local/cronjobs


# Debian PHP config file
#PHP_CFG=/etc/php5/apache2/php.ini
# Debian PHP config folder and custom config file
PHP_CFG=/etc/php5/apache2/conf.d/00-maths.ini

# Debian SSL keys dir
SSL_DIR_KEYS=/etc/ssl/private
# Debian SSL certs dir
SSL_DIR_CERTS=/etc/ssl/certs

# Debian SSL website config file
APACHE_DIR_SITECONFS=/etc/apache2/sites-available/
APACHE_CONF_SSL_DEFAULT=default-ssl.conf
APACHE_CONF_SSL_NAME="${STACK_HOST}-ssl"



# Jobe package version
# (FIXME: Using current version from git, may be better to use a specific version?)
#JOBE_VERSION=x.x.x

JOBE_GIT_URI="https://github.com/trampgeek/jobe.git"



echo ">> Initial variables are now set."

echo ">> Jobe web root:      ${JOBE_WEB_ROOT}"
echo ">> Jobe folder:        ${JOBE_WEB_DIR}"

echo ">> Jobe version:       ${JOBE_VERSION}"
echo ">> Jobe git URI:       ${JOBE_GIT_URI}"

echo
}



######################################################################
# Functions
######################################################################




#=====================================================================
# Bootstrap this script onto the remote server
#=====================================================================
bootstrap()
{
    INSTALL_DIR="\${HOME}/bin"
    SCRIPT=`basename $0`

    echo "Copying script '${SCRIPT}' onto server: '${RHOST}' into '${INSTALL_DIR}' as '${RUSER}' "
    echo "(You will need to login (as ${RUSER}) 2 times.)"
    echo "Creating install folder.."
    #ssh root@$RHOST "umask 027; mkdir -p $INSTALL_DIR"
    ssh -t "${RUSER}"@"${RHOST}"    "(umask 027 && mkdir -p ${INSTALL_DIR})"

    echo "Copying file.."
    #scp -p "$SCRIPT" root@$RHOST:/$INSTALL_DIR
    scp -p "${SCRIPT}"  "${RUSER}"@"${RHOST}":/"${INSTALL_DIR}"

    echo "File copied. Login to the server and run the script using sudo."
    exit
}




#=====================================================================
# Jobe install function
#=====================================================================
jobe_install()
{
    echo ">> Installing Jobe.."
    echo ">> NB: network port 9418 needs to be open for git traffic, to download packages"
    echo ">> Requests for input are prefixed with: ****"
    echo ">> Pausing.."; /bin/sleep $DELAY

    #-----------------------------------------------------------
    # Install needed packages
    #-----------------------------------------------------------

    # [octave, fp and pylint are required only if you need to run Octave or Pascal programs or test 
    # Python programs with pylint, respectively.].

    # Maths note: Debian only has Java 7, not Java 8

    # Ubuntu
    sudo apt-get install apache2 php libapache2-mod-php php-mcrypt mysql-server\
            php-mysql php-cli octave nodejs\
            git python3 build-essential openjdk-8-jre openjdk-8-jdk python3-pip\
            fp-compiler pylint acl

    # Debian 
    # Some packages have different names
    sudo apt-get install apache2 php5 libapache2-mod-php5 php5-mcrypt mariadb-server\
            php5-mysqlnd php5-cli octave nodejs\
            git python3 build-essential openjdk-7-jre openjdk-7-jdk python3-pip\
            fp-compiler pylint acl


    # FIXME: Unable to write to /etc with sudo?
    sudo pylint --reports=no --generate-rcfile > /etc/pylintrc


    #-----------------------------------------------------------
    # PHP config changes
    #-----------------------------------------------------------
    # Set PHP timezone
    # (Don't backup the file any more as we are not writing to the main PHP config file any more)
    #/bin/cp -a "$PHP_CFG" "$PHP_CFG"."$TIMESTAMP"
    /bin/cat <<EOT >> "$PHP_CFG"
;$MARK_START Set PHP timezone
[Date]
; Defines the default timezone used by the date functions
date.timezone = "Europe/London"
;$MARK_END
EOT


    #-----------------------------------------------------------
    # Restart Apache (just in case) to ensure that the PHP DB module is loaded
    #-----------------------------------------------------------
    /usr/sbin/apache2ctl graceful




    # Download Jobe into the web folder
    echo ">> Downloading Jobe (this will create a folder '${JOBE_WEB_DIR}'.."
    sudo /usr/bin/git clone  "${JOBE_GIT_URI}"  "${JOBE_WEB_ROOT}"


    # Install Jobe
    cd "${JOBE_WEB_DIR}"
    sudo ./install


    #***********************************************************
    # Set if server is http or https
    #***********************************************************
    echo "**** Enter the website protocol type (http (default (press enter)), or https): "
    echo "(If protocol changes later, edit wwwroot var, in config.php in Moodle web root)"
    read PROTO

    if [ "$PROTO" = "https" ]
    then
        PROTO=https
        PORT=443

        echo ">> Enabling SSL.."
        /usr/sbin/a2enmod ssl

        echo ">> Copying security key and certs from remote storage onto this server.."
        echo "**** Use scp manually to copy the files onto the server."

        echo "**** Enter the name of the key file: "
        read SSL_KEY
        echo "**** Now copy the file to the server into: ${SSL_DIR_KEYS} "
        echo

        echo "**** Enter the name of the certificate file: "
        read SSL_CERT
        echo "**** Now copy the file to the server into: ${SSL_DIR_CERTS} "
        echo

        echo "**** Enter the name of the certificate chain file (for JISC certs): "
        read SSL_CHAIN
        echo "**** Now copy the file to the server into: ${SSL_DIR_CERTS} "
        echo

        echo "**** Press enter AFTER you have copied the cert files to the server."; read CONTINUE


        echo ">> Setting up SSL config for website: ${STACK_HOST} "

        echo "**** Do you want to create/overwrite the (possibly existing) site SSL config file? [yN]"
        read CONFIRM

        if [ "$CONFIRM" = "y" ]
        then
            echo ">> Creating new SSL config file for website: ${STACK_HOST} "

            /bin/cp -a ${APACHE_DIR_SITECONFS}/${APACHE_CONF_SSL_DEFAULT} \
                ${APACHE_DIR_SITECONFS}/${APACHE_CONF_SSL_NAME}.conf
        fi


        echo "**** Now edit the site SSL config file"
        echo "**** ${APACHE_DIR_SITECONFS}/${APACHE_CONF_SSL_NAME}.conf"
        echo "**** (If the website hostname is not the same as the actual server,"
        echo "**** edit the hostname in the VirtualHost line.)"
        echo "**** Comment out the default fake cert lines and insert: "

        echo "SSLCertificateFile        ${SSL_DIR_CERTS}/${SSL_CERT}"
        echo "SSLCertificateKeyFile     ${SSL_DIR_KEYS}/${SSL_KEY}"
        echo "SSLCertificateChainFile   ${SSL_DIR_CERTS}/${SSL_CHAIN}"

        echo "**** Press enter AFTER you have edited the site SSL config file."; read CONTINUE

        echo ">> Enabling SSL config file (and restarting webserver) for website: ${STACK_HOST} "
        /usr/sbin/a2ensite ${APACHE_CONF_SSL_NAME}
        /usr/sbin/apache2ctl graceful

    else
        PROTO=http
        PORT=80
    fi


    STACK_URI=${PROTO}://${STACK_HOST}.${STACK_DOMAIN}/${STACK_SERVICE}
    echo ">> Website address is: $STACK_URI"
    echo ">> Pausing.."; /bin/sleep $DELAY


} ## end jobe_install
#=====================================================================




######################################################################
# Jobe remove function
######################################################################
jobe_remove()
{
    echo ">> TODO: Removing Jobe.. (not working, so exiting..)"
    # TODO: Update this function
    exit


    echo ">> Disabling website (error can be ignored if site was not https).."
    /usr/sbin/a2dissite ${APACHE_CONF_SSL_NAME}

    echo ">> Stopping Apache.."
    /usr/sbin/apache2ctl stop
    echo ">> Pausing.."; /bin/sleep $DELAY

    echo "Mark start: ${MARK_START}"
    echo "Mark end: ${MARK_END}"

    echo ">> Removing PHP config changes.."
    # https://stackoverflow.com/questions/11738346/how-to-remove-text-block-from-file-with-bash
    echo "/^;${MARK_START}/,/^;${MARK_END}/d"
    /bin/sed -i "/^;${MARK_START}/,/^;${MARK_END}/d" $PHP_CFG

    echo ">> Deleting database '${STACK_SERVICE}'.."
    echo "DROP DATABASE IF EXISTS $STACK_SERVICE" | /usr/bin/mysql

    echo ">> Deleting DB user '$MOODLE_DB_USER'.."
    echo "DROP USER '$MOODLE_DB_USER'@'localhost'" | /usr/bin/mysql

    echo ">> Removing .my.cnf changes.."
    /bin/sed -i "/^#${MARK_START}/,/^#${MARK_END}/d" $SQL_CNF

    # Stop DB system
    echo ">> Stopping MariaDB.."
    /usr/sbin/service mysql stop
    echo ">> Pausing.."; /bin/sleep $DELAY

    # Completely purge DB system?
    echo "**** Completely purge entire DB system? [yN]: "
    read PURGE_DB
    if [ "$PURGE_DB" = "y" ]
    then
        /usr/bin/apt-get purge mariadb-server
        # Need to also use autoremove to actually delete mysqld (huh?)
        /usr/bin/apt-get autoremove
    fi


    echo ">> Removing Stack web files.."
    /bin/rm -r $STACK_WEB_ROOT

    echo ">> Removing Moodle data folder.."
    /bin/rm -r $MOODLE_DATA_DIR


    echo ">> Removing crontabs changes.."
    /bin/sed -i "/^#${MARK_START}/,/^#${MARK_END}/d" $APACHE_CRONTAB
    /bin/sed -i "/^#${MARK_START}/,/^#${MARK_END}/d" $ROOT_CRONTAB

    echo ">> Removing DB backup script.."
    /bin/rm "$BKP_SDATA_SCRIPT"

}
## end jobe_remove
######################################################################




######################################################################
# main code
######################################################################

#=====================================================================
# Parse command line arguments
#=====================================================================
while [ $# -gt 0 ]; do
    case $1 in
        -b )
                ACTION=bootstrap
                RHOST=$2
                shift
                ;; 

        -l )    RUSER=$2 ;;

        -i )    ACTION=jobe_install;;
        -r )    ACTION=jobe_remove;;
        -s )    STACK_SERVICE=$2;;
        -h )    echo "Options: "
                echo "$0 [-b rhost -l ruser] | [(-i|-r)] | [-h]"
                echo " -b rhost -l ruser = bootstrap script to remote host <rhost> as user <ruser>"
                echo " -i = install"
                echo " -r = remove ** NOT WORKING **"
                #echo " -s servicename = set the one-word name for this Stack service (required)"
                echo " -h = help"
                echo "Must be run with sudo in install or remove mode."
                exit 0;;
        * )     break;;
    esac
    shift
done


if [ "$ACTION" = "bootstrap" ]; then
    $ACTION
fi


#======================================================================
# Script needs sudo/root privileges to run in install mode
#======================================================================
if [ `id -u` -ne 0 ]; then
    echo "$0: must be run with sudo/root privileges, exiting.. (Use -h for help.)" 1>&2
    exit 1
fi


# Set up configuration
config

if [ "$ACTION" != "" ]
then
    $ACTION
else
    echo "No action specified, exiting.. " 1>&2
    exit 1
fi

## END
